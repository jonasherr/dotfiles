{
  "version": 3,
  "sources": ["../src/index.tsx", "../src/model/KarabinerManager.ts"],
  "sourcesContent": ["import {\n  ActionPanel,\n  Action,\n  Icon,\n  List,\n  showToast,\n  Toast,\n  Color,\n  showHUD,\n  popToRoot,\n  closeMainWindow,\n  open,\n  Clipboard,\n} from \"@raycast/api\";\nimport { useEffect, useState } from \"react\";\nimport { ILayout } from \"./model/interfaces\";\nimport { isKarabinerCliAvailable, KarabinerManager } from \"./model/KarabinerManager\";\n\nfunction toastErrorOptions(message: string, error: string): Toast.Options {\n  return {\n    title: \"An error occurred\",\n    message,\n    style: Toast.Style.Failure,\n    primaryAction: {\n      title: \"Copy Error\",\n      onAction: () => Clipboard.copy(`${error}`),\n      shortcut: { modifiers: [\"cmd\", \"shift\"], key: \"c\" },\n    },\n  };\n}\n\nasync function handleLayoutSwitch(profile: ILayout) {\n  try {\n    await profile.activate();\n    await Promise.all([showHUD(`Activated ${profile.title}`), popToRoot(), closeMainWindow()]);\n  } catch (e) {\n    await showToast(toastErrorOptions(`Couldn't activate ${profile.title}`, `${e}`));\n  }\n}\n\nexport default function Command() {\n  const [profiles, setProfiles] = useState<ILayout[]>([]);\n  const [loadingErr, setLoadingErr] = useState<boolean>(false);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setProfiles(await KarabinerManager.getAll());\n      } catch (e) {\n        if (!(await isKarabinerCliAvailable())) {\n          setLoadingErr(true);\n          const options: Toast.Options = {\n            ...toastErrorOptions(\"Karabiner Elements CLI not available\", `${e}`),\n            secondaryAction: {\n              title: \"Get Karabiner\",\n              onAction: () => open(\"https://karabiner-elements.pqrs.org\"),\n              shortcut: { modifiers: [\"cmd\"], key: \"o\" },\n            },\n          };\n          await showToast(options);\n        } else {\n          await showToast(toastErrorOptions(\"Couldn't get profiles\", `${e}`));\n        }\n      }\n    })();\n  }, []);\n\n  return (\n    <List isLoading={profiles.length === 0 && !loadingErr} searchBarPlaceholder=\"Search available layouts...\">\n      {profiles.map((source) => (\n        <List.Item\n          key={source.id}\n          icon={source.active ? { source: Icon.Checkmark, tintColor: Color.Green } : Icon.Circle}\n          title={source.title}\n          accessories={[{ text: source.active ? \"Current Profile\" : \"\" }]}\n          keywords={[source.id]}\n          actions={\n            <ActionPanel>\n              <Action icon={Icon.Checkmark} title=\"Activate\" onAction={() => handleLayoutSwitch(source)} />\n              <Action\n                icon={Icon.Gear}\n                title=\"Open Karabiner Elements\"\n                onAction={() => open(\"/System/Volumes/Data/Applications/Karabiner-Elements.app\")}\n              />\n            </ActionPanel>\n          }\n        />\n      ))}\n    </List>\n  );\n}\n", "import { exec as Exec } from \"child_process\";\nimport { promisify } from \"util\";\n\nimport { ILayout, ILayoutManager } from \"./interfaces\";\n\nconst exec = promisify(Exec);\nconst karabinerCliPath = \"'/Library/Application Support/org.pqrs/Karabiner-Elements/bin/karabiner_cli'\";\n\nexport async function isKarabinerCliAvailable(): Promise<boolean> {\n  try {\n    await exec(`/bin/test -f ${karabinerCliPath}`);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport const KarabinerManager: ILayoutManager = class KarabinerProfile implements ILayout {\n  static activeInput?: string;\n\n  private constructor(\n    readonly id: string,\n    readonly title: string,\n  ) {}\n\n  get active(): boolean {\n    return this.title === KarabinerManager.activeInput;\n  }\n\n  public async activate(): Promise<void> {\n    const result = await exec(`${karabinerCliPath} --select-profile '${this.id}'`);\n    const status = result.stdout.split(\"\\n\")[0];\n    if (status.startsWith(\"[error]\")) {\n      throw new Error(`Karabiner Profile \"${this.title}\" not found`);\n    } else {\n      return;\n    }\n  }\n\n  static async getAll() {\n    // Fetch data\n    const [inputsResult, activeResult] = await Promise.all([\n      exec(`${karabinerCliPath} --list-profile-names`),\n      exec(`${karabinerCliPath} --show-current-profile-name`),\n    ]);\n\n    // Set active source\n    KarabinerManager.activeInput = activeResult.stdout.split(\"\\n\")[0];\n\n    // Create instances\n    const profileNames = inputsResult.stdout.split(\"\\n\");\n    const sources: Array<ILayout> = [];\n    for (const profileName of profileNames) {\n      if (profileName.length === 0) continue;\n      sources.push(new KarabinerProfile(profileName, profileName));\n    }\n    return sources;\n  }\n};\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "Command", "__toCommonJS", "import_api", "import_react", "import_child_process", "import_util", "exec", "Exec", "karabinerCliPath", "isKarabinerCliAvailable", "_a", "KarabinerManager", "id", "title", "inputsResult", "activeResult", "profileNames", "sources", "profileName", "__publicField", "import_jsx_runtime", "toastErrorOptions", "message", "error", "handleLayoutSwitch", "profile", "Command", "profiles", "setProfiles", "loadingErr", "setLoadingErr", "KarabinerManager", "e", "isKarabinerCliAvailable", "options", "source"]
}
