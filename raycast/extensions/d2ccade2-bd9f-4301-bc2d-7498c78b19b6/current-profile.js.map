{
  "version": 3,
  "sources": ["../src/current-profile.tsx", "../src/model/KarabinerManager.ts"],
  "sourcesContent": ["import { updateCommandMetadata } from \"@raycast/api\";\nimport { KarabinerManager } from \"./model/KarabinerManager\";\n\nexport default async function Command() {\n  await KarabinerManager.getAll();\n\n  await updateCommandMetadata({ subtitle: KarabinerManager.activeInput ?? \"\u274C Error\" });\n}\n", "import { exec as Exec } from \"child_process\";\nimport { promisify } from \"util\";\n\nimport { ILayout, ILayoutManager } from \"./interfaces\";\n\nconst exec = promisify(Exec);\nconst karabinerCliPath = \"'/Library/Application Support/org.pqrs/Karabiner-Elements/bin/karabiner_cli'\";\n\nexport async function isKarabinerCliAvailable(): Promise<boolean> {\n  try {\n    await exec(`/bin/test -f ${karabinerCliPath}`);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport const KarabinerManager: ILayoutManager = class KarabinerProfile implements ILayout {\n  static activeInput?: string;\n\n  private constructor(\n    readonly id: string,\n    readonly title: string,\n  ) {}\n\n  get active(): boolean {\n    return this.title === KarabinerManager.activeInput;\n  }\n\n  public async activate(): Promise<void> {\n    const result = await exec(`${karabinerCliPath} --select-profile '${this.id}'`);\n    const status = result.stdout.split(\"\\n\")[0];\n    if (status.startsWith(\"[error]\")) {\n      throw new Error(`Karabiner Profile \"${this.title}\" not found`);\n    } else {\n      return;\n    }\n  }\n\n  static async getAll() {\n    // Fetch data\n    const [inputsResult, activeResult] = await Promise.all([\n      exec(`${karabinerCliPath} --list-profile-names`),\n      exec(`${karabinerCliPath} --show-current-profile-name`),\n    ]);\n\n    // Set active source\n    KarabinerManager.activeInput = activeResult.stdout.split(\"\\n\")[0];\n\n    // Create instances\n    const profileNames = inputsResult.stdout.split(\"\\n\");\n    const sources: Array<ILayout> = [];\n    for (const profileName of profileNames) {\n      if (profileName.length === 0) continue;\n      sources.push(new KarabinerProfile(profileName, profileName));\n    }\n    return sources;\n  }\n};\n"],
  "mappings": "qjBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAsC,wBCAtC,IAAAC,EAA6B,yBAC7BC,EAA0B,gBAI1B,IAAMC,KAAO,aAAU,EAAAC,IAAI,EACrBC,EAAmB,+EANzB,IAAAC,EAiBaC,GAAmCD,EAAA,KAA0C,CAGhF,YACGE,EACAC,EACT,CAFS,QAAAD,EACA,WAAAC,CACR,CAEH,IAAI,QAAkB,CACpB,OAAO,KAAK,QAAUF,EAAiB,WACzC,CAEA,MAAa,UAA0B,CAGrC,IAFe,MAAMG,EAAK,GAAGC,uBAAsC,KAAK,KAAK,GACvD,OAAO,MAAM;AAAA,CAAI,EAAE,CAAC,EAC/B,WAAW,SAAS,EAC7B,MAAM,IAAI,MAAM,sBAAsB,KAAK,kBAAkB,CAIjE,CAEA,aAAa,QAAS,CAEpB,GAAM,CAACC,EAAcC,CAAY,EAAI,MAAM,QAAQ,IAAI,CACrDH,EAAK,GAAGC,wBAAuC,EAC/CD,EAAK,GAAGC,+BAA8C,CACxD,CAAC,EAGDJ,EAAiB,YAAcM,EAAa,OAAO,MAAM;AAAA,CAAI,EAAE,CAAC,EAGhE,IAAMC,EAAeF,EAAa,OAAO,MAAM;AAAA,CAAI,EAC7CG,EAA0B,CAAC,EACjC,QAAWC,KAAeF,EACpBE,EAAY,SAAW,GAC3BD,EAAQ,KAAK,IAAIT,EAAiBU,EAAaA,CAAW,CAAC,EAE7D,OAAOD,CACT,CACF,EAxCEE,EAD8CX,EACvC,eADuCA,GDdhD,eAAOY,GAAiC,CACtC,MAAMC,EAAiB,OAAO,EAE9B,QAAM,yBAAsB,CAAE,SAAUA,EAAiB,aAAe,cAAU,CAAC,CACrF",
  "names": ["current_profile_exports", "__export", "Command", "__toCommonJS", "import_api", "import_child_process", "import_util", "exec", "Exec", "karabinerCliPath", "_a", "KarabinerManager", "id", "title", "exec", "karabinerCliPath", "inputsResult", "activeResult", "profileNames", "sources", "profileName", "__publicField", "Command", "KarabinerManager"]
}
